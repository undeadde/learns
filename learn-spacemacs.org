#+title: Spacemacs source code learn and how to configure it

* 初始化
**  垃圾回收机制设置内存为100M

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 100000000)
   #+END_SRC


** 版本变量定义

   #+BEGIN_SRC emacs-lisp
     (defconst spacemacs-version          "0.200.9" "Spacemacs version.")
     (defconst spacemacs-emacs-min-version   "24.4" "Minimal version of Emacs.")
   #+END_SRC

** Emacs 版本判断, 必须大于24.4以上, 否则报错,  加载core/core-load-paths.el 文件 

   #+BEGIN_SRC emacs-lisp
     (if (not (version<= spacemacs-emacs-min-version emacs-version))
         (error (concat "Your version of Emacs (%s) is too old. "
                        "Spacemacs requires Emacs version %s or above.")
                emacs-version spacemacs-emacs-min-version)
                (load-file (concat (file-name-directory load-file-name)
                                   "core/core-load-paths.el"))
       )

   #+END_SRC

** core/core-load-path.el 文件解读
*** 定义函数 add-to-load-path (dir)
    #+BEGIN_SRC emacs-lisp
    (defun add-to-load-path (dir) (add-to-list 'load-path dir))
    #+END_SRC

*** 定义函数 add-to-load-path-if-exists (dir)

    #+BEGIN_SRC emacs-lisp
      (defun add-to-load-path-if-exists (dir)
        "If DIR exists in the file system, add it to `load-path'."
        (when (file-exists-p dir)
          (add-to-load-path dir)))
    #+END_SRC

*** 定义变量 spacemacs-start-dictionary
    #+BEGIN_SRC emacs-lisp
      (defvar spacemacs-start-directory
        user-emacs-directory
        "Spacemacs start directory.")
    #+END_SRC

*** 定义变量 spacemacs-core-directory 

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-core-directory
        (expand-file-name (concat spacemacs-start-directory "core/"))
        "Spacemacs core directory.")
    #+END_SRC

*** 定义变量 spacemacs-info-directory 

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-info-directory
        (expand-file-name (concat spacemacs-core-directory "info/"))
        "Spacemacs info files directory")
    #+END_SRC

*** 定义变量 spacemacs-release-notes-directory

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-release-notes-directory
        (expand-file-name (concat spacemacs-info-directory "release-notes/"))
        "Spacemacs release notes directory")
    #+END_SRC

*** 定义变量 spacemacs-banner-directory 

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-banner-directory
        (expand-file-name (concat spacemacs-core-directory "banners/"))
        "Spacemacs banners directory.")
    #+END_SRC

*** 定义变量 spacemacs-banners-official-png

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-banner-official-png
        (expand-file-name (concat spacemacs-banner-directory "img/spacemacs.png"))
        "Spacemacs official banner image.")
    #+END_SRC

*** 定义变量 spacemacs-badge-official-png

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-badge-official-png
        (expand-file-name (concat spacemacs-banner-directory
                                  "img/spacemacs-badge.png"))
        "Spacemacs official badge image.")
    #+END_SRC

*** 定义变量 spacemacs-purple-heart-png

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-purple-heart-png
        (expand-file-name (concat spacemacs-banner-directory "img/heart.png"))
        "Purple heart emoji.")

    #+END_SRC

*** 定义变量 spacemacs-cache-directory 

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-cache-directory
        (expand-file-name (concat user-emacs-directory ".cache/"))
        "Spacemacs storage area for persistent files")

    #+END_SRC

*** 定义变量 spacemacs-auto-save-directory

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-auto-save-directory
        (expand-file-name (concat spacemacs-cache-directory "auto-save/"))
        "Spacemacs auto-save directory")
        
    #+END_SRC

*** 定义变量spacemacs-docs-directory 

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-docs-directory
        (expand-file-name (concat spacemacs-start-directory "doc/"))
        "Spacemacs documentation directory.")

    #+END_SRC

***  定义变量spacemacs-news-directory 

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-news-directory
        (expand-file-name (concat spacemacs-start-directory "news/"))
        "Spacemacs News directory.")
    #+END_SRC

*** 定义变量spacemacs-assets-directory

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-assets-directory
        (expand-file-name (concat spacemacs-start-directory "assets/"))
        "Spacemacs assets directory.")

    #+END_SRC

*** 定义变量spacemacs-test-directory

    #+BEGIN_SRC emacs-lisp
      (defconst spacemacs-test-directory
        (expand-file-name (concat spacemacs-start-directory "tests/"))
        "Spacemacs tests directory.")
    #+END_SRC

*** 定义常量 user-home-directory


    #+BEGIN_SRC emacs-lisp
      (defconst user-home-directory
        (expand-file-name "~/")
        "User home directory (~/).")
    #+END_SRC

*** 定义常量 pcache-directory

    #+BEGIN_SRC emacs-lisp
      (defconst pcache-directory
        (concat spacemacs-cache-directory "pcache/"))
    #+END_SRC

*** 如果不存在spacemacs-cache-directory,创建目录

    #+BEGIN_SRC emacs-lisp
      (unless (file-exists-p spacemacs-cache-directory)
        (make-directory spacemacs-cache-directory))
    #+END_SRC

*** 加载部分路径

    #+BEGIN_SRC emacs-lisp
      ;; load paths
      mapc 'add-to-load-path
      `(
        ,spacemacs-core-directory
        ,(concat spacemacs-core-directory "libs/")
        ,(concat spacemacs-core-directory "libs/spacemacs-theme/")
        ;; ,(concat spacemacs-core-directory "aprilfool/")
        ))

      ;; themes
      (add-to-list 'custom-theme-load-path (concat spacemacs-core-directory
                                                   "libs/spacemacs-theme/"))
    #+END_SRC

** TODO 加载 core-spacemacs 模块

   #+BEGIN_SRC emacs-lisp
     (require 'core-spacemacs)
   #+END_SRC

*** 设置日志大小
    #+BEGIN_SRC emacs-lisp
    (setq message-log-max 16384)
    #+END_SRC

*** 定义常量 emacs-start-time
    #+BEGIN_SRC 
    (defconst emacs-start-time (current-time))
    #+END_SRC

*** 加载模块 subr-x
*** 加载模块 page-break-lines
*** TODO 加载模块 core-debug
**** 定义函数 spacemacs/display-and-copy-version ()
     显示spacemacs的版本，并且把字符串拷贝到内存中
**** 加载模块 profile
**** 定义变量
    | 变量名                              | 值   |
    |-------------------------------------+------|
    | spacemacs-debug-timer-threshold     | 0.15 |
    | spacemacs-debugp                    | nil  |
    | spacemacs-debug-with-profile        | nil  |
    | spacemacs-debug-with-timed-required | nil  |
    | spacemacs-debug-with-adv-timers     | nil  |
**** 定义函数spacemacs//load-timer (origfunc &rest args)

*** 加载模块 core-command-line
*** 加载模块 core-dotspacemacs
*** 加载模块 core-release-management
*** 加载模块 core-auto-completion
**** 定义变量
     | 变量名                             | 值 |
     |------------------------------------+----|
     | spacemacs-default-company-backends |    |

**** 定义宏
     | 宏        | 值                      |   |
     |-----------+-------------------------+---|
     | spacemacs | defavr-company-backends |   |
     |           |                         |   |

*** 加载模块 core-jump
*** 加载模块 core-display-init
*** 加载模块 core-themes-support
*** 加载模块 core-fonts-support
*** 加载模块 core-spacemacs-buffer
*** 加载模块 core-keybindings
*** 加载模块 core-toggle
*** 加载模块 core-funcs
*** 加载模块 core-micro-state
*** 加载模块 core-transient-state
*** 加载模块 core-use-package-ext
*** 定义变量
    | 变量名                                 | 值               |
    |----------------------------------------+------------------|
    | spacemacs-loading-char                 | ?█               |
    | spacemacs-loading-string               | ""               |
    | spacemacs-loading-counter              | 0                |
    | spacemacs-loading-value                | 0                |
    | spacemacs-loading-dots-chunk-count     | 3                |
    | spacemacs-loading-dots-count           | 80               |
    | spacemacs-loading-dots-chunk-size      | 80/3             |
    | spacemacs-loading-dots-chunk-threshold | 0                |
    | spacemacs-post-user-config-hook        | nil              |
    | spacemacs-post-user-config-hook-run    | nil              |
    | spacemacs--default-mode-line           | mode-line-format |
    | spacemacs-initialized                  | nil              |
*** TODO 定义函数 spacemacs/init ()

    #+BEGIN_SRC emacs-lisp
      (defun spacemacs/init ()
        "Perform startup initialization."
        (when spacemacs-debugp (spacemacs/init-debug))
        ;; silence ad-handle-definition about advised functions getting redefined
        (setq ad-redefinition-action 'accept)
        ;; this is for a smoother UX at startup (i.e. less graphical glitches)
        (hidden-mode-line-mode)
        (spacemacs//removes-gui-elements)
        (spacemacs//setup-ido-vertical-mode)
        ;; explicitly set the prefered coding systems to avoid annoying prompt
        ;; from emacs (especially on Microsoft Windows)
        (prefer-coding-system 'utf-8)
        ;; TODO move these variables when evil is removed from the bootstrapped
        ;; packages.
        (setq-default evil-want-C-u-scroll t
                      ;; `evil-want-C-i-jump' is set to nil to avoid `TAB' being
                      ;; overlapped in terminal mode. The GUI specific `<C-i>' is used
                      ;; instead.
                      evil-want-C-i-jump nil)
        (dotspacemacs/load-file)
        (require 'core-configuration-layer)
        (dotspacemacs|call-func dotspacemacs/init "Calling dotfile init...")
        (when dotspacemacs-maximized-at-startup
          (unless (frame-parameter nil 'fullscreen)
            (toggle-frame-maximized))
          (add-to-list 'default-frame-alist '(fullscreen . maximized)))
        (dotspacemacs|call-func dotspacemacs/user-init "Calling dotfile user init...")
        (setq dotspacemacs-editing-style (dotspacemacs//read-editing-style-config
                                          dotspacemacs-editing-style))
        (configuration-layer/initialize)
        ;; Apply theme
        (let ((default-theme (car dotspacemacs-themes)))
          (condition-case err
              (spacemacs/load-theme default-theme nil)
            ('error
             ;; fallback on Spacemacs default theme
             (setq spacemacs--default-user-theme default-theme)
             (setq dotspacemacs-themes (delq spacemacs--fallback-theme
                                             dotspacemacs-themes))
             (add-to-list 'dotspacemacs-themes spacemacs--fallback-theme)
             (setq default-theme spacemacs--fallback-theme)
             (load-theme spacemacs--fallback-theme t)))
          ;; protect used themes from deletion as orphans
          (setq configuration-layer--protected-packages
                (append
                 (delq nil (mapcar 'spacemacs//get-theme-package
                                   dotspacemacs-themes))
                 configuration-layer--protected-packages))
          (setq-default spacemacs--cur-theme default-theme)
          (setq-default spacemacs--cycle-themes (cdr dotspacemacs-themes)))
        ;; font
        (spacemacs|do-after-display-system-init
         ;; If you are thinking to remove this call to `message', think twice. You'll
         ;; break the life of several Spacemacser using Emacs in daemon mode. Without
         ;; this, their chosen font will not be set on the *first* instance of
         ;; emacsclient, at least if different than their system font. You don't
         ;; believe me? Go ahead, try it. After you'll have notice that this was true,
         ;; increase the counter bellow so next people will give it more confidence.
         ;; Counter = 1
         (message "Setting the font...")
         (unless (spacemacs/set-default-font dotspacemacs-default-font)
           (spacemacs-buffer/warning
            "Cannot find any of the specified fonts (%s)! Font settings may not be correct."
            (if (listp (car dotspacemacs-default-font))
                (mapconcat 'car dotspacemacs-default-font ", ")
              (car dotspacemacs-default-font)))))
        ;; spacemacs init
        (setq inhibit-startup-screen t)
        (spacemacs-buffer/goto-buffer)
        (unless (display-graphic-p)
          ;; explicitly recreate the home buffer for the first GUI client
          ;; in order to correctly display the logo
          (spacemacs|do-after-display-system-init
           (kill-buffer (get-buffer spacemacs-buffer-name))
           (spacemacs-buffer/goto-buffer)))
        ;; This is set to nil during startup to allow Spacemacs to show buffers opened
        ;; as command line arguments.
        (setq initial-buffer-choice nil)
        (setq inhibit-startup-screen t)
        (require 'core-keybindings)
        ;; for convenience and user support
        (unless (fboundp 'tool-bar-mode)
          (spacemacs-buffer/message (concat "No graphical support detected, "
                                            "you won't be able to launch a "
                                            "graphical instance of Emacs"
                                            "with this build.")))
        ;; check for new version
        (if dotspacemacs-mode-line-unicode-symbols
            (setq-default spacemacs-version-check-lighter "[⇪]"))
        ;; install the dotfile if required
        (dotspacemacs/maybe-install-dotfile)
        ;; install user default theme if required
        (when spacemacs--default-user-theme
          (spacemacs/load-theme spacemacs--default-user-theme 'install)))
    #+END_SRC
    
    当spacemacs-debugp 为真，调用 spacemacs/init-debug
    

*** 定义函数 spacemacs//removes-gui-elements ()
    关闭菜单栏，工具栏，滚动条。

    #+BEGIN_SRC emacs-lisp

      (defun spacemacs//removes-gui-elements ()
        "Remove the menu bar, tool bar and scroll bars."
        ;; removes the GUI elements
        (when (and (fboundp 'tool-bar-mode) (not (eq tool-bar-mode -1)))
          (tool-bar-mode -1))
        (unless (spacemacs/window-system-is-mac)
          (when (and (fboundp 'menu-bar-mode) (not (eq menu-bar-mode -1)))
            (menu-bar-mode -1)))
        (when (and (fboundp 'scroll-bar-mode) (not (eq scroll-bar-mode -1)))
          (scroll-bar-mode -1))
        ;; tooltips in echo-aera
        (when (and (fboundp 'tooltip-mode) (not (eq tooltip-mode -1)))
          (tooltip-mode -1)))

    #+END_SRC

*** TODO 定义函数 spacemacs//setup-ido-vertical-mode ()
    安装ido-vertical-mode

    #+BEGIN_SRC emacs-lisp
      (defun spacemacs//setup-ido-vertical-mode ()
        "Setup `ido-vertical-mode'."
        (require 'ido-vertical-mode)
        (ido-vertical-mode t)
        (add-hook
         'ido-setup-hook
         ;; think about hacking directly `ido-vertical-mode' source in libs instead.
         (defun spacemacs//ido-vertical-natural-navigation ()
           ;; more natural navigation keys: up, down to change current item
           ;; left to go up dir
           ;; right to open the selected item
           (define-key ido-completion-map (kbd "<up>") 'ido-prev-match)
           (define-key ido-completion-map (kbd "<down>") 'ido-next-match)
           (define-key ido-completion-map (kbd "<left>") 'ido-delete-backward-updir)
           (define-key ido-completion-map (kbd "<right>") 'ido-exit-minibuffer))))
    #+END_SRC

*** TODO 定义函数 display-startup-echo-area-message ()
*** TODO 定义函数 spacemacs/defer-until-after-user-config (func)
*** TODO 定义函数 spacemacs/setup-startup-hook ()
** TODO 调用 spacemacs/init

   #+BEGIN_SRC emacs-lisp
     (spacemacs/init)
   #+END_SRC
 
** TODO 调用 configuration-layer/sync　

   #+BEGIN_SRC emacs-lisp

     (configuration-layer/sync)
   #+END_SRC

** TODO 调用 spacemacs-buffer/display-startup-note

   #+BEGIN_SRC emacs-lisp

     (spacemacs-buffer/display-startup-note)
   #+END_SRC

** TODO 调用 spacemacs/setup-startup-hook

   #+BEGIN_SRC emacs-lisp

     (spacemacs/setup-startup-hook)
   #+END_SRC

** TODO 加载模块 server

   #+BEGIN_SRC emacs-lisp

     (require 'server)
   #+END_SRC

** TODO 启动 server-start

   #+BEGIN_SRC emacs-lisp
     (unless (server-running-p) (server-start)))
   #+END_SRC
